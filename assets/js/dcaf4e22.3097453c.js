"use strict";(self.webpackChunkbrobridge_org_github_io=self.webpackChunkbrobridge_org_github_io||[]).push([[2492],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7251:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:5},i="CLI",c={unversionedId:"components/cli",id:"version-2.0.0/components/cli",title:"CLI",description:"The CLI (Command Line Interface) is a tool for operating Gravity, enabling the creation of Data Products, Rules, Tokens, and other mechanisms. The CLI calls the Dispatcher's API, with the actual logic processing being handled by the Dispatcher.",source:"@site/versioned_docs/version-2.0.0/components/cli.md",sourceDirName:"components",slug:"/components/cli",permalink:"/docs/components/cli",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-2.0.0/components/cli.md",tags:[],version:"2.0.0",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Adapter",permalink:"/docs/components/adapter"},next:{title:"Reference",permalink:"/docs/category/reference"}},l={},s=[{value:"Build from source",id:"build-from-source",level:2},{value:"Utility",id:"utility",level:2},{value:"Scripts",id:"scripts",level:2},{value:"Schema example",id:"schema-example",level:3},{value:"Rule example",id:"rule-example",level:3}],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cli"},"CLI"),(0,a.kt)("p",null,"The CLI (Command Line Interface) is a tool for operating Gravity, enabling the creation of Data Products, Rules, Tokens, and other mechanisms. The CLI calls the Dispatcher's API, with the actual logic processing being handled by the Dispatcher."),(0,a.kt)("h2",{id:"build-from-source"},"Build from source"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/BrobridgeOrg/gravity-cli.git\ncd gravity-cli\ngo build\n")),(0,a.kt)("h2",{id:"utility"},"Utility"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'./gravity-cli\ngravity-cli is a command line utility of Gravity.\n\nUsage:\n  gravity-cli [command]\n\nAvailable Commands:\n  benchmark   measuring performance\n  completion  Generate the autocompletion script for the specified shell\n  help        Help about any command\n  product     Manage data products\n  pub         Publish domain event\n  purge       Purge domain event\n  token       Manage access tokens\n\nFlags:\n  -d, --domain string   Specify data domain (default "default")\n  -h, --help            help for gravity-cli\n  -s, --host string     Specify server address (default "0.0.0.0:32803")\n  -t, --token string    Specify access token\n\nUse "gravity-cli [command] --help" for more information about a command.\n')),(0,a.kt)("h2",{id:"scripts"},"Scripts"),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"scripts")," directory, you can find examples of Schema and Rule. Both are in Javascript format, allowing developers to create metadata scripts for Data Products according to their own needs."),(0,a.kt)("h3",{id:"schema-example"},"Schema example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n    "id": { "type": "uint" },\n    "name": { "type": "string" },\n    "type": { "type": "string" },\n    "phone": { "type": "string" },\n    "address": { "type": "string" }\n}\n')),(0,a.kt)("h3",{id:"rule-example"},"Rule example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"return {\n    id: source.id,\n    name: source.name,\n    type: source.type,\n    phone: source.phone,\n    address: source.address\n}\n")))}d.isMDXComponent=!0}}]);